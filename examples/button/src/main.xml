<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">

    <require id="GPIO" path="GPIO" />
    <require id="HardwarepinsModule" path="HardwarepinsModule" />

    <container id="MainContainer" top="0" left="0" bottom="0" right="0">
        <skin color="white"/>
        <label string="'- - -'">
            <style font="24px Arial" color="black"/>
            <behavior>
                <method id="handleButtonChanged" params="content, state, pressed">
                    <![CDATA[
                        var info = state == HardwarepinsModule.LOW ? "Low" : "High";

                        if( pressed )
                            info += " (Pressed)";

                        content.string = info;
                    ]]>
                </method>
            </behavior>
        </label>
    </container>

    <script>
        <![CDATA[
            // Create a new Button object that will poll for state
            // changes on GPIO input pin 9. The button is pressed
            // when the input state is set to 0 (low)
            var button = new GPIO.Button( 9, HardwarepinsModule.LOW );

            // initialize the led group
            button.init();

            // create the main container and add it to the application
            application.add( new MainContainer() );

            // start polling the button state
            button.poll( 50, HardwarepinsModule.MILLISECONDS, "/button/value" );
        ]]>
    </script>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Handler that is called when the button state is changed -->
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <handler path="/button/value">
        <behavior>
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                    var data = message.requestObject;

                    if( data != null ) 
                        application.distribute( "handleButtonChanged", data.value, data.pressed );
                ]]>
            </method>
        </behavior>
    </handler>

</program>
